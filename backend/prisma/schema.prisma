generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin/User who creates quizzes/rooms
model User {
  id         String       @id @default(uuid())
  name       String
  email      String    @unique
  image      String?
  isAdmin    Boolean   @default(false)
  
  // Rooms created by this user (host)
  rooms      Room[]    @relation(name: "UserRooms")
  
  // Responses from this user (if needed for analytics)
  responses  Response[] @relation(name: "UserResponses")
}

// Room created by a host (User)
model Room {
  id         String    @id @default(uuid())
  hostId     String       
  host       User      @relation(name: "UserRooms", fields: [hostId], references: [id])
  
  // Quiz associated with this room
  quizId     String?
  quiz       Quiz?     @relation(name: "RoomQuiz", fields: [quizId], references: [id])
  
  // Players participating in the room (unauthenticated users)
  players    Player[]  @relation(name: "RoomPlayers")
  
  // Responses from players in this room
  responses  Response[] @relation(name: "RoomResponses")
  
  startedAt  DateTime?
  endedAt    DateTime?
}

// Unauthenticated players joining via room code
model Player {
  id        String    @id @default(uuid())
  nickname  String
  roomId    String    
  room      Room      @relation(name: "RoomPlayers", fields: [roomId], references: [id])
  score     Int       @default(0)
  createdAt DateTime  @default(now())
  
  // Responses from this player
  responses Response[] @relation(name: "PlayerResponses")
}

// Quiz created by a host
model Quiz {
  id          String    @id @default(uuid())
  title       String
  description String?
  
  // Questions in this quiz
  questions   Question[] @relation(name: "QuizQuestions")
  
  // Rooms using this quiz
  rooms       Room[]    @relation(name: "RoomQuiz")
}

// Individual question in a quiz
model Question {
  id        String    @id @default(uuid())
  quizId    String    
  quiz      Quiz      @relation(name: "QuizQuestions", fields: [quizId], references: [id])
  text      String
  options   String[]
  answer    String
  timeLimit Int
  
  // Responses to this question
  responses Response[] @relation(name: "QuestionResponses")
}

// Player's response to a question
model Response {
  id         String    @id @default(uuid())
  
  playerId   String    
  player     Player    @relation(name: "PlayerResponses", fields: [playerId], references: [id])
  
  questionId String    
  question   Question  @relation(name: "QuestionResponses", fields: [questionId], references: [id])
  
  selected   String
  isCorrect  Boolean
  timeTaken  Int
  timestamp  DateTime  @default(now())
  
  userId     String?
  user       User?     @relation(name: "UserResponses", fields: [userId], references: [id], map: "user_fk")
  
  // Room relation (optional)
  roomId     String?
  room       Room?     @relation(name: "RoomResponses", fields: [roomId], references: [id], map: "room_fk")
}